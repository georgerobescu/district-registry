scalar Date
scalar Keyword
scalar BigNumber

type Query {
  district(regEntry_address: ID!): District
  searchDistricts(
    statuses: [RegEntryStatus],
    orderBy: DistrictsOrderBy,
    orderDir: OrderDir,
    first: Int,
    after: String
  ): DistrictList

  paramChange(regEntry_address: ID!): ParamChange
  searchParamChanges(key: String!,
    db: String!,
    orderBy: ParamChangesOrderBy,
    orderDir: OrderDir,
    groupBy: ParamChangesGroupBy,
    first: Int,
    after: String
  ): ParamChangeList

  param(db: String!, key: String!): Param
  params(db: String!, keys: [String!]): [Param]

  config: Config
}

enum ParamChangesOrderBy {
  paramChanges_orderBy_appliedOn
}

enum ParamChangesGroupBy {
  paramChanges_groupBy_key
}

enum OrderDir {
  asc
  desc
}

enum DistrictsOrderBy {
  districts_orderBy_revealPeriodEnd
  districts_orderBy_commitPeriodEnd
  districts_orderBy_dntStaked
  districts_orderBy_totalSupply
  districts_orderBy_createdOn
}

enum RegEntryStatus {
  regEntry_status_challengePeriod
  regEntry_status_commitPeriod
  regEntry_status_revealPeriod
  regEntry_status_blacklisted
  regEntry_status_whitelisted
}

interface RegEntry {
  regEntry_address: ID
  regEntry_version: Int
  regEntry_status: RegEntryStatus
  regEntry_creator: ID
  regEntry_deposit: BigNumber
  regEntry_createdOn: Date
  regEntry_challengePeriodEnd: Date
  regEntry_challenges: [Challenge]
}

type Challenge {
  challenge_challenger: ID
  challenge_createdOn: Date
  challenge_rewardPool: BigNumber
  challenge_commitPeriodEnd: Date
  challenge_revealPeriodEnd: Date
  challenge_votesInclude: BigNumber
  challenge_votesExclude: BigNumber
  challenge_votesTotal: BigNumber
  challenge_claimedRewardOn: Date
  challenge_vote(voter: ID): Vote
}

enum VoteOption {
  voteOption_neither
  voteOption_include
  voteOption_exclude
}

type Vote {
  vote_secretHash: String
  vote_option: VoteOption
  vote_amount: BigNumber
  vote_revealedOn: Date
  vote_claimedRewardOn: Date
  vote_reward: BigNumber
}

type District implements RegEntry {
  regEntry_address: ID
  regEntry_version: Int
  regEntry_status: RegEntryStatus
  regEntry_creator: ID
  regEntry_deposit: BigNumber
  regEntry_createdOn: Date
  regEntry_challengePeriodEnd: Date
  regEntry_challenges: [Challenge]

  district_metaHash: String
  district_name: String
  district_description: String
  district_url: String
  district_githubUrl: String
  district_logoImageHash: String
  district_backgroundImageHash: String
  district_dntWeight: Int
  district_dntStaked: BigNumber
  district_totalSupply: BigNumber
  district_dntStakedFor(staker: ID): BigNumber
  district_balanceOf(staker: ID): BigNumber
}

type DistrictList {
  items: [District]
  totalCount: Int
  endCursor: String
  hasNextPage: Boolean
}

type ParamChange implements RegEntry {
  regEntry_address: ID
  regEntry_version: Int
  regEntry_status: RegEntryStatus
  regEntry_creator: ID
  regEntry_deposit: BigNumber
  regEntry_createdOn: Date
  regEntry_challengePeriodEnd: Date
  regEntry_challenges: [Challenge]

  paramChange_db: String
  paramChange_key: String
  paramChange_value: BigNumber
  paramChange_originalValue: BigNumber
  paramChange_appliedOn: Date
}

type ParamChangeList {
  items: [ParamChange]
  totalCount: Int
  endCursor: ID
  hasNextPage: Boolean
}

type Param {
  param_db: ID
  param_key: ID
  param_value: Float
}

type Config {
  ipfs: Ipfs
}
type Ipfs {
  host: String
  endpoint: String
  gateway: String
}
